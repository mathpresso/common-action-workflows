on:
  workflow_call:
    inputs:
      service:
        required: true
        type: string
      env:
        required: true
        type: string
      team:
        required: true
        type: string

jobs:
  deploy-each:
    runs-on: ubuntu-latest

    steps:
      - name: ðŸ”¥ Prepare ðŸ”¥
        run: |
          echo "TODAY=$(date --date='+9 hours' +%y.%m.%d)" >> $GITHUB_ENV

      - name: âœ¨ Deploy tag and release âœ¨
        uses: actions/github-script@v7
        with:
          script: |
            const checkBranch = () => {
              switch ("${{ inputs.team }}") {
                case "backend":
                  return ("${{ inputs.env }}" == "prod" && context.ref == "refs/heads/main") || ("${{ inputs.env }}" == "dev" && context.ref == "refs/heads/develop")
                case "frontend":
                  return "${{ inputs.env }}" == "prod" && context.ref == "refs/heads/main"
                case "devops":
                  return context.ref == "refs/heads/master"
                case "research":
                  return context.ref == "refs/heads/main"
                case "datateam":
                  return ("${{ inputs.env }}" == "prod" && context.ref == "refs/heads/master") || ("${{ inputs.env }}" == "dev" && context.ref == "refs/heads/develop")                  
              }
              return false
            }
            if (checkBranch()) {
              const tagPrefix = "${{ inputs.service }}/${{ inputs.env }}/"
              const query = `query($owner:String!, $name:String!) {
                repository(owner: $owner, name: $name) {
                  refs(refPrefix: "refs/tags/${tagPrefix}", last: 1, orderBy: {field: ALPHABETICAL, direction: ASC}) {
                    nodes {
                      name
                    }
                  }
                }
              }`
              const variables = {
                owner: context.repo.owner,
                name: context.repo.repo,
              }
              const lastTagVersion = (await github.graphql(query, variables)).repository.refs.nodes[0]?.name ?? "0.0.0-0"
              const newIdx = lastTagVersion.split("-")[0] === "${{ env.TODAY }}" ? parseInt(lastTagVersion.split("-")[1]) + 1 : 1
              const newTagVersion = `${{ env.TODAY }}-${newIdx}`
              const tagName = tagPrefix + newTagVersion

              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tagName}`,
                sha: context.sha
              })
              let note = "ðŸŒ± First deployment with github action ðŸŒ±"
              try {
                note = (await github.rest.repos.generateReleaseNotes({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: tagName,
                  previous_tag_name: tagPrefix + lastTagVersion
                })).data.body
              } catch {}
              await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tagName,
                name: tagName,
                body: note
              })
            } else {
              throw 'Ref match exception'
            }
